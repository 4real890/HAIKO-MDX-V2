//Give Me Credit If Using This File Give Me Credit On Your Channel ‚úÖ 
// Credits Dev Professeur - HAIKO-MDX-V2 üíú 

const { isJidGroup } = require('@whiskeysockets/baileys');
const config = require('../config');

const fallbackPP = 'https://i.ibb.co/KhYC4FY/1221bc0bdd2354b42b293317ff2adbcf-icon.png';

const getContextInfo = (m) => ({
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
            newsletterJid: '120363398101781980@newsletter',
            newsletterName: 'ùêèùêëùêéùêÖ-ùêóùêìùêëùêÑùêåùêÑ',
            serverMessageId: 143,
        },
    });

const GroupEvents = async (conn, update) => {
    try {
        const isGroup = isJidGroup(update.id);
        if (!isGroup) return;

        const metadata = await conn.groupMetadata(update.id);
        const participants = update.participants;
        const desc = metadata.desc || "No Description";
        const groupMembersCount = metadata.participants.length;

        let ppUrl;
        try {
            ppUrl = await conn.profilePictureUrl(update.id, 'image');
        } catch {
            ppUrl = ppUrls[Math.floor(Math.random() * ppUrls.length)];
        }

        for (const num of participants) {
            const userName = num.split("@")[0];
            const timestamp = new Date().toLocaleString();

            if (update.action === "add" && config.WELCOME === "true") {
                const WelcomeText = `‚ï≠‚ïº‚îÅ‚â™‚Ä¢ùêñùêÑùêãùêÇùêéùêåùêÑ‚Ä¢‚â´‚îÅ‚ïæ‚ïÆ
‚îÉùêáùêÑùêò: @${userName} üëã
‚îÉùêÉùêÑùêï: ùêèùêëùêéùêÖ-ùêóùêìùêëùêÑùêåùêÑ
‚îÉùêçùêîùêåùêÅùêÑùêë: #${groupMembersCount}
‚îÉùêìùêàùêåùêÑ: ${timestamp}‚è∞
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ô¢‚îÅ‚îÅ‚ô¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
ùêóùêìùêëùêÑùêåùêÑ ùêÉùêÑùêíùêÇùêëùêàùêèùêìùêàùêéùêç
${desc}
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥á·¥† x·¥õ Ä·¥á·¥ç·¥á*`;

                await conn.sendMessage(welcome, true);

            } else if (update.action === "remove" && config.WELCOME === "true") {
                const GoodbyeText = `‚ï≠‚ïº‚îÅ‚â™‚Ä¢ùêÜùêéùêéùêÉùêÅùêòùêÑ‚Ä¢‚â´‚îÅ‚ïæ‚ïÆ
‚îÉùêÅùêòùêÑ: @${userName} üëã
‚îÉùêÉùêÑùêï: ùêèùêëùêéùêÖ-ùêóùêìùêëùêÑùêåùêÑ
‚îÉùêçùêîùêåùêÅùêÑùêë: #${groupMembersCount}
‚îÉùêìùêàùêåùêÑ: ${timestamp}‚è∞
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ô¢‚îÅ‚îÅ‚ô¢‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥á·¥† x·¥õ Ä·¥á·¥ç·¥á*`;

                await conn.sendMessage(goodbye, true);

            } else if (update.action === "demote" && config.ADMIN_EVENTS === "true") {
                const demoter = update.author.split("@")[0];
                await conn.sendMessage(update.id, {
                    text: `
‚ï≠‚îÄ‚™® ùêÄùêÉùêåùêàùêç ùêÑùêïùêÑùêçùêì ‚™© :
‚îÇ@${demoter} ùêáùêÄùêí ùêÉùêÑùêåùêéùêìùêÑùêÉ @${userName} ùêÖùêëùêéùêå ùêÄùêÉùêåùêàùêç. üëÄ
‚îÇ
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ‚è∞ ùêìùêàùêåùêÑ:*${timestamp}*
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇüôã‚Äç‚ôÇÔ∏è ùêÜùêëùêéùêîùêè:*${metadata.subject}*
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥á·¥† x·¥õ Ä·¥á·¥ç·¥á*`,
                    mentions: [update.author, num],
                    contextInfo: getContextInfo({ sender: update.author }),
                    image: { url: ppUrl },
                });

                await sendMessage(promoteMsg, false, [user, update.author].filter(Boolean));

            } else if (update.action === "promote" && config.ADMIN_EVENTS === "true") {
                const promoter = update.author.split("@")[0];
                await conn.sendMessage(update.id, {
                    text: `
‚ï≠‚îÄ‚™® ùêÄùêÉùêåùêàùêç ùêÑùêïùêÑùêçùêì ‚™© :
‚îÇ@${promoter} ùêáùêÄùêí ùêèùêëùêéùêåùêéùêìùêÑùêÉ @${userName} ùêìùêé ùêÄùêÉùêåùêàùêç. üéâ
‚îÇ
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ‚è∞ ùêìùêàùêåùêÑ:*${timestamp}*
‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇüôã‚Äç‚ôÇÔ∏è ùêÜùêëùêéùêîùêè:*${metadata.subject}*
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥á·¥† x·¥õ Ä·¥á·¥ç·¥á*`,
                    
                    mentions: [update.author, num],
                    contextInfo: getContextInfo({ sender: update.author }),
                    
                });
                
                await sendMessage(demoteMsg, false, [user, update.author].filter(Boolean));
            }
        }
    } catch (err) {
        console.error('Group event error:', err);
    }
};

module.exports = GroupEvents;
